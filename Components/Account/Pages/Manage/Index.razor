@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using CSE325_team.Data
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext DbContext

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>



            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser _currentUser = default!;
    private Models.Contact? _currentContact;
    private string? username;
    private string? phoneNumber;
    private bool _initialized = false;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Prevent re-initialization if already loaded
        if (_initialized) return;

        // this is what the scaffolding provided
        _currentUser = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(_currentUser);
        phoneNumber = await UserManager.GetPhoneNumberAsync(_currentUser);

        //Input.PhoneNumber ??= phoneNumber;

        // get contact information attached to user
        _currentContact = await DbContext.Contact.FirstOrDefaultAsync(c=>c.ApplicationUserId == _currentUser.Id);

        // initialize fields with values from user and contact tables only if Input is empty
        if (Input is null)
        {
            Input = new InputModel();
        }

        // if field is null, fill form; on re-post, any fields
        // that user typed remains as-is; any still empty fields
        // get database values if they exist
        Input.FirstName ??= _currentUser?.FirstName;
        Input.LastName ??= _currentUser?.LastName;
        Input.PhoneNumber ??= _currentUser?.PhoneNumber;
        Input.AltPhoneNumber ??= _currentContact?.AltPhoneNumber;
        Input.StreetLine1 ??= _currentContact?.StreetLine1;
        Input.StreetLine2 ??= _currentContact?.StreetLine2;
        Input.City ??= _currentContact?.City;
        Input.State ??= _currentContact?.State;
        Input.PostalCode ??= _currentContact?.PostalCode;

        _initialized = true;
    }

    private async Task OnValidSubmitAsync()
    {
        //if(_currentUser is null) return;
        // came with scaffolding, adds error handling from Identity
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }
        
        // get or create a contact for user
        if (_currentContact is null)
        {

        }

        //update user database fields with data in Input fields



        await SignInManager.RefreshSignInAsync(_currentUser);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    // Create InputModel class to take data from User and Contact models
    // username is not included because it is not editable here.
    private sealed class InputModel
    {
    
        [Display(Name = "First Name")]
        public string? FirstName {get;set;}
        
        [Display(Name = "Last Name")]
        public string? LastName {get;set;}        
        
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        [Phone]
        [Display(Name = "Alternate Phone number")]
        public string? AltPhoneNumber { get; set; }

        [Display(Name = "Street address")]
        public string? StreetLine1 {get;set;}        

        [Display(Name = "Street address line 2")]
        public string? StreetLine2 {get;set;}

        [Display(Name = "City")]
        public string? City {get;set;}

        [Display(Name = "State")]
        public string? State {get;set;}

        [Display(Name = "Postal Zip Code")]
        public string? PostalCode {get;set;}

    }
}
