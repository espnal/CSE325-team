@page "/booking-summary"
@rendermode InteractiveServer
@inject CSE325_team.Data.ApplicationDbContext DbContext
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject NavigationManager Navigation
@inject CSE325_team.Services.BookingState BookingState
@inject AuthenticationStateProvider AuthenticationStateProvider

@using CSE325_team.Models
@using Microsoft.AspNetCore.Components.Authorization

@*
    BookingSummary.razor

    This component displays a summary of the user's booking before final confirmation.
    - Shows booking details such as vehicle, daily rate, number of days, subtotal, tax, and total price.
    - Displays pick-up and drop-off dates, customer name, and payment method.
    - If booking data is missing, prompts the user to start a new booking.
    - Provides a "Confirm & Book" button to finalize and save the booking.
    - Handles errors during booking confirmation and displays an error message if needed.

    Key Methods:
    - ConfirmAndSave: Validates booking data, creates a new booking record in the database, and navigates to the booking success page upon success. Handles and displays errors if the operation fails.

    Parameters/Dependencies:
    - BookingState: Holds the current booking information.
    - DbContext: Used to persist the booking to the database.
    - Navigation: Used to redirect the user after successful booking.

    Usage:
    Place this component at the end of the booking workflow to allow users to review and confirm their booking.
*@
<PageTitle>Booking Summary</PageTitle>

<h2 class="booking-title">Booking Confirmation</h2>
@if (string.IsNullOrEmpty(BookingState.CustomerName) || BookingState.VehicleId == 0)
{
    <div class="alert alert-warning">
        No booking data found. Please <a href="/booking">start a new booking</a>.
    </div>
}
else
{
    <div class="booking-form-wrapper">
        <div class="booking-summary">
            <h4>Booking Details</h4>
            <table>
                <tr>
                    <td>Vehicle</td>
                    <td>@BookingState.VehicleDisplay</td>
                </tr>
                <tr>
                    <td>Daily Rate</td>
                    <td>@BookingState.DailyRate.ToString("C")</td>
                </tr>
                <tr>
                    <td>Days</td>
                    <td>@((BookingState.DropOffDate - BookingState.PickupDate).Days)</td>
                </tr>
                <tr>
                    <td>Subtotal</td>
                    <td>@BookingState.Subtotal.ToString("C")</td>
                </tr>
                <tr>
                    <td>Tax (18%)</td>
                    <td>@BookingState.Tax.ToString("C")</td>
                </tr>
                <tr class="summary-total">
                    <td><strong>Total</strong></td>
                    <td><strong>@BookingState.TotalPrice.ToString("C")</strong></td>
                </tr>
            </table>
            <div class="summary-details">
                <span><b>Pick-up:</b> @BookingState.PickupDate.ToShortDateString()</span>
                <span><b>Drop-off:</b> @BookingState.DropOffDate.ToShortDateString()</span>
                <span><b>Customer:</b> @BookingState.CustomerName</span>
                <span><b>Payment:</b> @BookingState.PaymentMethod</span>
            </div>
            <button class="btn btn-confirm" @onclick="ConfirmAndSave">Confirm & Book</button>
        </div>
        @if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
    </div>
}

@code {
    private string ErrorMessage;

private async Task ConfirmAndSave()
{
    try
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            ErrorMessage = "You must be logged in to make a booking.";
            return;
        }

        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId))
        {
            ErrorMessage = "Unable to determine user identity. Please log in again.";
            return;
        }

        var days = (BookingState.DropOffDate - BookingState.PickupDate).Days;
        if (days <= 0) days = 1;

        //
        var booking = new Booking
        {
            VehicleId = BookingState.VehicleId,
            PickupDate = BookingState.PickupDate,
            DropOffDate = BookingState.DropOffDate,
            TotalPrice = BookingState.TotalPrice,
            UserId = userId
        };

        DbContext.Booking.Add(booking);
        await DbContext.SaveChangesAsync();

        Navigation.NavigateTo("/booking-success");
    }
    catch (Exception ex)
    {
        ErrorMessage = ex.Message;
    }
}

    private void ResetBookingState()
    {
        BookingState.Reset();
    }
}