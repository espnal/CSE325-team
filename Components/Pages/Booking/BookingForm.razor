
@*
    BookingForm.razor

    This component provides a vehicle booking form and displays the user's booking history with inline editing capabilities.

    Features:
    - Vehicle selection with details preview (type, color, transmission, daily rate, image).
    - Date pickers for pick-up and drop-off dates with validation (drop-off must be after pick-up).
    - Payment method and customer name input fields.
    - Real-time booking summary with subtotal, tax (18%), and total calculation.
    - Form validation using data annotations and custom date validation.
    - On valid submission, booking details are stored in a shared BookingState service and navigation proceeds to a summary page.
    - Displays authenticated user's booking history in a table.
    - Inline editing of bookings: allows changing vehicle and dates, with recalculation of total price including tax.
    - Inline deletion of bookings with confirmation.
    - Success messages shown after editing or deleting bookings.
    - Uses dependency injection for database context, navigation, JS interop, booking state, and authentication state provider.

    Key Methods:
    - OnInitializedAsync: Loads available vehicles and user bookings if authenticated.
    - LoadUserBookings: Fetches bookings for the current user from the database.
    - ComputeDays, ComputeSubtotal, ComputeTax, ComputeTotal: Helper methods for pricing calculations.
    - OnVehicleSelected: Updates selected vehicle and form model.
    - ShowSummary: Stores booking details and navigates to summary.
    - StartEdit, CancelEdit: Manage inline editing state.
    - OnEditVehicleChanged, OnEditDateChanged: Recalculate booking total on edit.
    - SaveBooking: Persists edited booking to the database.
    - ConfirmDelete: Deletes a booking after confirmation.

    Models:
    - BookingFormModel: Form model with validation attributes and custom date validation.

    Dependencies:
    - CSE325_team.Data.ApplicationDbContext
    - CSE325_team.Models.Vehicle, Booking
    - CSE325_team.Services.BookingState
    - Microsoft.AspNetCore.Components.Authorization
    - Microsoft.EntityFrameworkCore
    - Microsoft.JSInterop

*@
@page "/booking"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using CSE325_team.Models

@inject CSE325_team.Data.ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject CSE325_team.Services.BookingState BookingState
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Book a Vehicle</PageTitle>

<h2 class="booking-title">Book Your Vehicle</h2>

<div class="booking-form-wrapper">
    <EditForm Model="@formModel" OnValidSubmit="ShowSummary" OnInvalidSubmit="HandleInValidSubmit" FormName="booking-form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-body">
            <div class="form-group">
                <label for="vehicleSelect">Vehicle</label>
                <select class="form-control" id="vehicleSelect" @onchange="OnVehicleSelected" required>
                    <option value="" disabled selected>Select a vehicle...</option>
                    @foreach (var v in vehicles)
                    {
                        <option value="@v.VehicleId">@($"{v.Make} {v.Model} ({v.Year})")</option>
                    }
                </select>
                <ValidationMessage For="@(() => formModel.VehicleId)" />
            </div>

            @if (selectedVehicle != null)
            {
                <div class="vehicle-details">
                    <div>
                        <strong>Type:</strong> @selectedVehicle.VehicleType <br />
                        <strong>Color:</strong> @selectedVehicle.Color <br />
                        <strong>Transmission:</strong> @selectedVehicle.Transmission <br />
                        <strong>Daily Rate:</strong> <span class="price">@selectedVehicle.DailyRate.ToString("C")</span>
                    </div>
                    @if (!string.IsNullOrEmpty(selectedVehicle.ImageFileName))
                    {
                        <img src="images/vehicles/@selectedVehicle.ImageFileName" class="vehicle-image" alt="Vehicle image" />
                    }
                </div>
            }

            <div class="form-group">
                <label for="pickupDate">Pick-up Date</label>
                <InputDate id="pickupDate" class="form-control" @bind-Value="formModel.PickupDate" required />
                <ValidationMessage For="@(() => formModel.PickupDate)" />
            </div>

            <div class="form-group">
                <label for="dropOffDate">Drop-off Date</label>
                <InputDate id="dropOffDate" class="form-control" @bind-Value="formModel.DropOffDate" required />
                <ValidationMessage For="@(() => formModel.DropOffDate)" />
            </div>

            <div class="form-group">
                <label for="paymentMethod">Payment Method</label>
                <select class="form-control" id="paymentMethod" @bind="formModel.PaymentMethod" required>
                    <option value="" disabled selected>Select a method...</option>
                    <option value="Credit Card">Credit Card</option>
                    <option value="Debit">Debit</option>
                    <option value="Cash">Cash</option>
                </select>
                <ValidationMessage For="@(() => formModel.PaymentMethod)" />
            </div>

            <div class="form-group">
                <label for="customerName">Full Name</label>
                <InputText id="customerName" class="form-control" @bind-Value="formModel.CustomerName" required />
                <ValidationMessage For="@(() => formModel.CustomerName)" />
            </div>
        </div>

        <div class="booking-summary">
            @if (selectedVehicle != null)
            {
                <table>
                    <tr>
                        <td>Vehicle</td>
                        <td>@($"{selectedVehicle.Make} {selectedVehicle.Model} ({selectedVehicle.Year})")</td>
                    </tr>
                    <tr>
                        <td>Daily Rate</td>
                        <td>@selectedVehicle.DailyRate.ToString("C")</td>
                    </tr>
                    <tr>
                        <td>Days</td>
                        <td>@TotalDays</td>
                    </tr>
                    <tr>
                        <td>Subtotal</td>
                        <td>@Subtotal.ToString("C")</td>
                    </tr>
                    <tr>
                        <td>Tax (18%)</td>
                        <td title="Includes 18% tax applied to subtotal">@Tax.ToString("C")</td>
                    </tr>
                    <tr class="summary-total">
                        <td><strong>Total</strong></td>
                        <td><strong>@Total.ToString("C")</strong></td>
                    </tr>
                </table>
            }
            <button class="btn btn-confirm" type="submit" disabled="@(selectedVehicle == null || !IsValidDates)">Continue</button>
        </div>
    </EditForm>
</div>

<!-- Booking History Section with inline editing -->
<div class="mt-5">
    <h3 class="text-lg font-semibold mb-3">Booking History</h3>

    @if (isLoadingHistory)
    {
        <p>Loading your reservations...</p>
    }
    else if (userBookings.Any())
    {
        <div class="overflow-x-auto shadow-md rounded-lg">
            <table class="table-auto w-full text-left border-collapse">
                <thead class="bg-gray-100">
                    <tr>
                        <th class="px-4 py-2">Vehicle</th>
                        <th class="px-4 py-2">Pickup</th>
                        <th class="px-4 py-2">Drop-off</th>
                        <th class="px-4 py-2">Total (Incl. Tax)</th>
                        <th class="px-4 py-2">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var booking in userBookings)
                    {
                        var isEditing = editingBookingId == booking.BookingId;

                        <tr class="border-b hover:bg-gray-50">
                            <td class="px-4 py-2">
                                @if (isEditing)
                                {
                                    <!-- vehicle select: bind value then recalc -->
                                    <select class="form-select rounded border border-gray-300 px-2 py-1"
                                            @bind="booking.VehicleId"
                                            @bind:event="onchange"
                                            @bind:after="async () => await OnEditVehicleChanged(booking)">
                                        @foreach (var v in vehicles)
                                        {
                                            <option value="@v.VehicleId">@($"{v.Make} {v.Model} ({v.Year})")</option>
                                        }
                                    </select>
                                }
                                else
                                {
                                    @booking.Vehicle?.Make @booking.Vehicle?.Model
                                }
                            </td>

                            <td class="px-4 py-2">
                                @if (isEditing)
                                {
                                    <InputDate class="form-control rounded border border-gray-300 px-2 py-1"
                                               @bind-Value="booking.PickupDate"
                                               @onchange="async (e) => await OnEditDateChanged(booking)" />
                                }
                                else
                                {
                                    @booking.PickupDate.ToShortDateString()
                                }
                            </td>

                            <td class="px-4 py-2">
                                @if (isEditing)
                                {
                                    <InputDate class="form-control rounded border border-gray-300 px-2 py-1"
                                               @bind-Value="booking.DropOffDate"
                                               @onchange="async (e) => await OnEditDateChanged(booking)" />
                                }
                                else
                                {
                                    @booking.DropOffDate.ToShortDateString()
                                }
                            </td>

                            <td class="px-4 py-2 font-semibold">
                                @booking.TotalPrice.ToString("C")
                            </td>

                            <td class="px-4 py-2">
                                @if (isEditing)
                                {
                                    <button class="btn btn-sm btn-success me-2" @onclick="() => SaveBooking(booking)">Save</button>
                                    <button class="btn btn-sm btn-secondary" @onclick="CancelEdit">Cancel</button>
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-warning me-2" 
        style="background-color: #0b2364; color: #fff; border: none;" @onclick="() => StartEdit(booking.BookingId)">Edit</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(booking.BookingId)">Delete</button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="text-center text-gray-500 mt-5">
            <i class="bi bi-calendar-x" style="font-size:2rem;"></i>
            <p class="mt-2">No reservations found</p>
        </div>
    }
</div>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="toast toast-success fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow">
        @successMessage
    </div>
}

@code {
    // ---------- Form state ----------
    private BookingFormModel formModel = new BookingFormModel
    {
        PickupDate = DateTime.Today,
        DropOffDate = DateTime.Today.AddDays(1)
    };

    private List<Vehicle> vehicles = new();
    private Vehicle? selectedVehicle;
    private const decimal TaxRate = 0.18M;
    private bool IsValidDates => formModel.PickupDate < formModel.DropOffDate;

    // ---------- Booking history ----------
    private List<Booking> userBookings = new();
    private bool isLoadingHistory = true;
    private string? currentUserId;

    // inline editing
    private int? editingBookingId = null;
    private string successMessage = "";
    private bool _initialized = false;

    // ---------- Initialization ----------
    protected override async Task OnInitializedAsync()
    {
        if (_initialized) return;

        try
        {
            vehicles = await DbContext.Vehicle.OrderBy(v => v.Make).ToListAsync();

            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity?.IsAuthenticated ?? false)
            {
                currentUserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                await LoadUserBookings();
            }
            else
            {
                userBookings = new List<Booking>();
                isLoadingHistory = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading initial data: {ex.Message}");
            isLoadingHistory = false;
        }
        finally
        {
            _initialized = true;
        }
    }

    private async Task LoadUserBookings()
    {
        isLoadingHistory = true;
        try
        {
            if (!string.IsNullOrEmpty(currentUserId))
            {
                userBookings = await DbContext.Booking
                    .Include(b => b.Vehicle)
                    .Where(b => b.UserId == currentUserId)
                    .OrderByDescending(b => b.PickupDate)
                    .ToListAsync();
            }
            else
            {
                userBookings = new List<Booking>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading bookings: {ex.Message}");
        }
        finally
        {
            isLoadingHistory = false;
        }
    }

    // ---------- Pure calculation helpers (unified pricing logic) ----------
    private int ComputeDays(DateTime from, DateTime to)
    {
        var diff = (to - from).Days;
        return diff > 0 ? diff : 1; // minimum 1 day (display perspective)
    }

    private decimal ComputeSubtotal(decimal dailyRate, int days) => dailyRate * days;

    private decimal ComputeTax(decimal subtotal, decimal taxRate) =>
        Math.Round(subtotal * taxRate, 2, MidpointRounding.AwayFromZero);

    private decimal ComputeTotal(decimal subtotal, decimal tax) => subtotal + tax;

    // ---------- Form helpers (main booking form) ----------
    private void OnVehicleSelected(ChangeEventArgs e)
    {
        if (e?.Value == null) return;
        if (!int.TryParse(e.Value.ToString(), out var id)) return;

        selectedVehicle = vehicles.FirstOrDefault(v => v.VehicleId == id);
        formModel.VehicleId = id;
    }

    // Using unified helper to compute days for the form (while preserving property name)
    private int TotalDays =>
        (IsValidDates && selectedVehicle != null)
            ? ComputeDays(formModel.PickupDate, formModel.DropOffDate)
            : 0;

    // Reimplemented with helpers
    private decimal Subtotal =>
        selectedVehicle == null ? 0 : ComputeSubtotal(selectedVehicle.DailyRate, TotalDays);

    private decimal Tax => ComputeTax(Subtotal, TaxRate);

    private decimal Total => ComputeTotal(Subtotal, Tax);

    private void HandleInValidSubmit(EditContext context)
    {
        Console.WriteLine($"Form submitted. IsValid={context.Validate()}");
    }

    private void ShowSummary()
    {
        if (selectedVehicle == null || !IsValidDates || formModel.VehicleId == null) return;

        BookingState.VehicleId = formModel.VehicleId.Value;
        BookingState.VehicleDisplay = $"{selectedVehicle.Make} {selectedVehicle.Model} ({selectedVehicle.Year})";
        BookingState.DailyRate = selectedVehicle.DailyRate;
        BookingState.PickupDate = formModel.PickupDate;
        BookingState.DropOffDate = formModel.DropOffDate;
        BookingState.PaymentMethod = formModel.PaymentMethod;
        BookingState.CustomerName = formModel.CustomerName;
        BookingState.Subtotal = Subtotal;
        BookingState.Tax = Tax;
        BookingState.TotalPrice = Total;

        Navigation.NavigateTo("/booking-summary");
    }

    // ---------- Inline editing ----------

    private void StartEdit(int bookingId)
    {
        editingBookingId = bookingId;
        successMessage = "";
    }

    private void CancelEdit()
    {
        editingBookingId = null;
        successMessage = "";
        _ = LoadUserBookings();
    }

    private async Task OnEditVehicleChanged(Booking booking)
    {
        // Unified recalculation including tax
        var v = vehicles.FirstOrDefault(x => x.VehicleId == booking.VehicleId);
        if (v != null)
        {
            var days = ComputeDays(booking.PickupDate, booking.DropOffDate);
            var subtotal = ComputeSubtotal(v.DailyRate, days);
            var tax = ComputeTax(subtotal, TaxRate);
            booking.TotalPrice = ComputeTotal(subtotal, tax);
        }
        StateHasChanged();
    }

    private async Task OnEditDateChanged(Booking booking)
    {
        var v = vehicles.FirstOrDefault(x => x.VehicleId == booking.VehicleId);
        if (v != null)
        {
            var days = ComputeDays(booking.PickupDate, booking.DropOffDate);
            var subtotal = ComputeSubtotal(v.DailyRate, days);
            var tax = ComputeTax(subtotal, TaxRate);
            booking.TotalPrice = ComputeTotal(subtotal, tax);
        }
        StateHasChanged();
    }

    private async Task SaveBooking(Booking booking)
    {
        if (booking.UserId != currentUserId)
        {
            await JS.InvokeVoidAsync("alert", "You are not authorized to edit this booking.");
            return;
        }

        if (booking.DropOffDate <= booking.PickupDate)
        {
            await JS.InvokeVoidAsync("alert", "Drop-off date must be after pick-up date.");
            return;
        }

        try
        {
            var vehicle = await DbContext.Vehicle.FirstOrDefaultAsync(v => v.VehicleId == booking.VehicleId);
            var days = ComputeDays(booking.PickupDate, booking.DropOffDate);
            decimal finalTotal = booking.TotalPrice;

            if (vehicle != null)
            {
                var subtotal = ComputeSubtotal(vehicle.DailyRate, days);
                var tax = ComputeTax(subtotal, TaxRate);
                finalTotal = ComputeTotal(subtotal, tax);
            }

            var entity = await DbContext.Booking.FindAsync(booking.BookingId);
            if (entity == null)
            {
                await JS.InvokeVoidAsync("alert", "Booking not found.");
                return;
            }

            if (entity.UserId != currentUserId)
            {
                await JS.InvokeVoidAsync("alert", "You are not authorized to edit this booking.");
                return;
            }

            entity.VehicleId = booking.VehicleId;
            entity.PickupDate = booking.PickupDate;
            entity.DropOffDate = booking.DropOffDate;
            entity.TotalPrice = finalTotal; // Store total INCLUDING tax

            await DbContext.SaveChangesAsync();

            editingBookingId = null;
            await LoadUserBookings();

            successMessage = "Booking updated successfully!";
            StateHasChanged();

            _ = Task.Run(async () =>
            {
                await Task.Delay(3000);
                successMessage = "";
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving booking: {ex}");
            await JS.InvokeVoidAsync("alert", $"Error updating booking: {ex.Message}");
        }
    }

    private async Task ConfirmDelete(int bookingId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this booking?");
        if (!confirmed) return;

        try
        {
            var entity = await DbContext.Booking.FindAsync(bookingId);
            if (entity == null)
            {
                await JS.InvokeVoidAsync("alert", "Booking not found.");
                return;
            }
            if (entity.UserId != currentUserId)
            {
                await JS.InvokeVoidAsync("alert", "You are not authorized to delete this booking.");
                return;
            }

            DbContext.Booking.Remove(entity);
            await DbContext.SaveChangesAsync();

            await LoadUserBookings();
            successMessage = "Booking deleted.";
            StateHasChanged();

            _ = Task.Run(async () =>
            {
                await Task.Delay(3000);
                successMessage = "";
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting booking: {ex}");
            await JS.InvokeVoidAsync("alert", $"Error deleting booking: {ex.Message}");
        }
    }

    // ---------- Form model ----------
    public class BookingFormModel
    {
        [Required(ErrorMessage = "Please select a vehicle.")]
        public int? VehicleId { get; set; }

        [Required(ErrorMessage = "Please select a pickup date.")]
        public DateTime PickupDate { get; set; } = DateTime.Today;

        [Required(ErrorMessage = "Please select a drop-off date.")]
        [CustomValidation(typeof(BookingFormModel), nameof(ValidateDates))]
        public DateTime DropOffDate { get; set; } = DateTime.Today.AddDays(1);

        [Required(ErrorMessage = "Please choose a payment method.")]
        public string PaymentMethod { get; set; } = "";

        [Required(ErrorMessage = "Please enter your full name.")]
        public string CustomerName { get; set; } = "";

        public static ValidationResult? ValidateDates(DateTime dropOffDate, ValidationContext context)
        {
            var instance = (BookingFormModel)context.ObjectInstance;
            return instance.PickupDate < dropOffDate ? ValidationResult.Success : new ValidationResult("Drop-off date must be after pickup date.");
        }
    }
}