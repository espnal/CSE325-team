@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using CSE325_team.Data
@using CSE325_team.Models

@rendermode InteractiveServer
@page "/admin/vehicles/delete/{VehicleId:int}"
@attribute [Authorize(Roles = "Admin")]
@inject ApplicationDbContext Db
@inject NavigationManager Nav
@inject ILogger<Delete> Log

<h3 class="mb-3">Delete Vehicle</h3>

@if (loading)
{
    <p><em>Loading…</em></p>
}
else if (vehicle is null)
{
    <div class="alert alert-warning">Vehicle with ID @VehicleId was not found.</div>
    <button class="btn btn-secondary" @onclick="BackToIndex" type="button">Back</button>
}
else
{
    <div class="alert alert-danger">
        <strong>Warning:</strong> This will permanently delete the vehicle record.
    </div>

    <div class="card mb-3">
        <div class="card-body">
            <dl class="row mb-0">
                <dt class="col-sm-3">Make</dt>
                <dd class="col-sm-9">@vehicle.Make</dd>
                <dt class="col-sm-3">Model</dt>
                <dd class="col-sm-9">@vehicle.Model</dd>
                <dt class="col-sm-3">Year</dt>
                <dd class="col-sm-9">@vehicle.Year</dd>
                <dt class="col-sm-3">Color</dt>
                <dd class="col-sm-9">@vehicle.Color</dd>
                <dt class="col-sm-3">Vehicle Type</dt>
                <dd class="col-sm-9">@vehicle.VehicleType</dd>
                <dt class="col-sm-3">Transmission</dt>
                <dd class="col-sm-9">@vehicle.Transmission</dd>
                <dt class="col-sm-3">Fuel Type</dt>
                <dd class="col-sm-9">@vehicle.FuelType</dd>
                <dt class="col-sm-3">Daily Rate</dt>
                <dd class="col-sm-9">@vehicle.DailyRate</dd>
                <dt class="col-sm-3">Capacity</dt>
                <dd class="col-sm-9">@vehicle.Capacity</dd>
                <dt class="col-sm-3">Mileage</dt>
                <dd class="col-sm-9">@vehicle.Mileage</dd>
                <dt class="col-sm-3">Status</dt>
                <dd class="col-sm-9">@vehicle.Status</dd>
                <dt class="col-sm-3">Image</dt>
                <dd class="col-sm-9">@vehicle.ImageFileName</dd>
            </dl>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    <div class="d-flex gap-2">
        <button class="btn btn-danger"
                type="button"
                disabled="@busy"
                @onclick="ConfirmDelete">
            @(busy ? "Deleting…" : "Delete")
        </button>
        <NavLink class="btn btn-secondary" href="/admin/vehicles">Cancel</NavLink>
    </div>
}

@code {
    [Parameter] public int VehicleId { get; set; }

    private Vehicle? vehicle;
    private bool loading = true;
    private bool busy = false;
    private string? errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        loading = true;
        errorMessage = null;

        try
        {
            vehicle = await Db.Vehicle
                .AsNoTracking()
                .FirstOrDefaultAsync(v => v.VehicleId == VehicleId);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ConfirmDelete()
    {
        Log.LogInformation("Delete clicked for VehicleId={VehicleId}", VehicleId);

        if (vehicle is null)
        {
            Log.LogWarning("Vehicle null at click time.");
            errorMessage = "Vehicle not found.";
            return;
        }

        busy = true;
        errorMessage = null;

        try
        {
            var entity = await Db.Vehicle.FindAsync(VehicleId);
            Log.LogInformation("FindAsync returned entity: {Found}", entity != null);

            if (entity is null)
            {
                errorMessage = "Vehicle no longer exists.";
                busy = false;
                return;
            }

            Db.Vehicle.Remove(entity);
            var rows = await Db.SaveChangesAsync();
            Log.LogInformation("SaveChangesAsync affected {Rows} row(s).", rows);

            Nav.NavigateTo("/admin/vehicles", forceLoad: true);
        }
        catch (DbUpdateException ex)
        {
            errorMessage = "Unable to delete. This vehicle may have related records (e.g., bookings). " +
                           $"Details: {ex.InnerException?.Message ?? ex.Message}";
            Log.LogError(ex, "DbUpdateException during delete.");
            busy = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
            Log.LogError(ex, "Unexpected exception during delete.");
            busy = false;
        }
    }

    private void BackToIndex() => Nav.NavigateTo("/admin/vehicles");
}