@page "/booking"
@using CSE325_team.Data
@using CSE325_team.Models;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.EntityFrameworkCore;
@inject ApplicationDbContext DbContext
@inject NavigationManager Nav
@inject CSE325_team.Services.BookingState BookingState

<h3>Reservar Vehículo</h3>

<EditForm Model="@formModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Vehículo:</label>
        <select @bind="formModel.VehicleId" class="form-select">
            <option value="">Seleccione...</option>
            @foreach (var v in vehicles)
            {
                <option value="@v.VehicleId">@v.Make @v.Model (@v.Year) - @v.Color - @v.DailyRate:C/día</option>
            }
        </select>
    </div>
    <div>
        <label>Fecha de recogida:</label>
        <InputDate @bind-Value="formModel.PickUpDate" class="form-control" />
    </div>
    <div>
        <label>Fecha de entrega:</label>
        <InputDate @bind-Value="formModel.DropOffDate" class="form-control" />
    </div>
    @if (!string.IsNullOrWhiteSpace(formModel.FormErrors))
    {
        <div class="alert alert-danger mt-2">@formModel.FormErrors</div>
    }
    <button type="submit" class="btn btn-primary mt-3">Siguiente</button>
</EditForm>

@code {
    private List<Vehicle> vehicles = new();
    private BookingFormModel formModel = new();

    protected override async Task OnInitializedAsync()
    {
        vehicles = await DbContext.Vehicles.OrderBy(v => v.Make).ThenBy(v => v.Model).ToListAsync();
    }

    private void HandleValidSubmit()
    {
        if (formModel.DropOffDate <= formModel.PickUpDate)
        {
            formModel.FormErrors = "La fecha de entrega debe ser posterior a la de recogida.";
            StateHasChanged();
            return;
        }
        BookingState.Set(formModel.VehicleId, formModel.PickUpDate, formModel.DropOffDate);
        Nav.NavigateTo("/booking/summary");
    }

    public class BookingFormModel
    {
        [Required(ErrorMessage = "Seleccione un vehículo.")]
        public int VehicleId { get; set; }

        [Required(ErrorMessage = "Ingrese la fecha de recogida.")]
        [DataType(DataType.Date)]
        public DateTime? PickUpDate { get; set; }

        [Required(ErrorMessage = "Ingrese la fecha de entrega.")]
        [DataType(DataType.Date)]
        public DateTime? DropOffDate { get; set; }

        public string? FormErrors { get; set; }
    }
}