@page "/bookings"
@using CSE325_team.Models
@inject HttpClient Http

<PageTitle>Current Reservation</PageTitle>

<div class="container mt-4">
    <h3>Create New Booking</h3>

    <div class="row">
        <!-- Left section: inputs -->
        <div class="col-md-8">
            <div class="mb-3">
                <label for="carSelect" class="form-label">Select a Car</label>
                <select id="carSelect" class="form-select" @onchange="OnCarSelected">
                    <option disabled selected value="">-- Choose a car --</option>
                    @foreach (var car in AvailableCars)
                    {
                        <option value="@car.Id">@car.Brand @car.Model (@car.PricePerDay.ToString("C"))</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label for="pickupDate" class="form-label">Pick-up Date</label>
                <InputDate @bind-Value="PickUpDate" class="form-control" id="pickupDate" />
            </div>

            <div class="mb-3">
                <label for="dropOffDate" class="form-label">Drop-off Date</label>
                <InputDate @bind-Value="DropOffDate" class="form-control" id="dropOffDate" />
            </div>
        </div>

        <!-- Right section: summary -->
        <div class="col-md-4">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Summary</h5>
                    <p><strong>Car:</strong> @SelectedCar?.Brand @SelectedCar?.Model</p>
                    <p><strong>Days:</strong> @BookingDays day(s)</p>
                    <p><strong>Price per Day:</strong> @SelectedCar?.PricePerDay.ToString("C")</p>
                    <p><strong>Total:</strong> <strong>@TotalPrice.ToString("C")</strong></p>
                    <button class="btn btn-primary w-100" disabled="@(!IsCarSelected)">Confirm Booking</button>
                </div>
            </div>
        </div>
    </div>
</div>

<hr />

<h4 class="mt-4">Booking History</h4>

@if (bookings == null)
{
    <p><em>Loading bookings...</em></p>
}
else if (bookings.Count == 0)
{
    <p>No bookings found.</p>
}
else
{
    <table class="table table-striped table-bordered">
        <thead class="table-dark">
            <tr>
                <th>Client</th>
                <th>Car</th>
                <th>Class</th>
                <th>Color</th>
                <th>Capacity</th>
                <th>Price/Day</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Total Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in bookings)
            {
                <tr>
                    <td>@booking.UserId</td>
                    <td>@booking.Car?.Brand @booking.Car?.Model</td>
                    <td>@booking.Car?.CarClass</td>
                    <td>@booking.Car?.Color</td>
                    <td>@booking.Car?.Capacity</td>
                    <td>@booking.Car?.PricePerDay.ToString("C")</td>
                    <td>@booking.StartDate.ToShortDateString()</td>
                    <td>@booking.EndDate.ToShortDateString()</td>
                    <td>@booking.TotalPrice.ToString("C")</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-2">Edit</button>
                        <button class="btn btn-sm btn-danger">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private DateTime PickUpDate = DateTime.Today;
    private DateTime DropOffDate = DateTime.Today.AddDays(1);
    private List<Car> AvailableCars = new();
    private Car? SelectedCar;
    private List<Booking> bookings;

    private bool IsCarSelected => SelectedCar != null;
    private int BookingDays => (DropOffDate - PickUpDate).Days <= 0 ? 1 : (DropOffDate - PickUpDate).Days;
    private decimal TotalPrice => SelectedCar == null ? 0 : BookingDays * SelectedCar.PricePerDay;

    protected override async Task OnInitializedAsync()
    {
        // Simulated car list (replace with API call)
        AvailableCars = new List<Car>
        {
            new Car { Id = 1, Brand = "Nissan",CarClass = "SUV", Model = "Versa",Color = "Black", Capacity = 5, PricePerDay = 45.00m },
        };

        bookings = new List<Booking>
        {
            new Booking
            {
                UserId = "Client01",
                Car = AvailableCars[0],
                StartDate = DateTime.Now,
                EndDate = DateTime.Now.AddDays(3),
                TotalPrice = 150.00M
            }
        };
    }

    private void OnCarSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int selectedCarId))
        {
            SelectedCar = AvailableCars.FirstOrDefault(c => c.Id == selectedCarId);
        }
    }
}
