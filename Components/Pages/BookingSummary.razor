@page "/booking/summary"
@using CSE325_team.Data
@using CSE325_team.Models;
@inject ApplicationDbContext DbContext
@inject NavigationManager Nav
@inject CSE325_team.Services.BookingState BookingState
@inject Microsoft.AspNetCore.Identity.UserManager<Microsoft.AspNetCore.Identity.IdentityUser> UserManager
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthProvider

<h3>Resumen de Reserva</h3>

@if (vehicle == null || BookingState.PickUpDate == null || BookingState.DropOffDate == null)
{
    <div class="alert alert-warning">Información insuficiente. <a href="/booking">Regresar</a></div>
}
else
{
    <div class="card mb-3" style="max-width: 500px;">
        <div class="card-body">
            <h5 class="card-title">@vehicle.Make @vehicle.Model (@vehicle.Year) - @vehicle.Color</h5>
            <p class="card-text">Tipo: @vehicle.VehicleType, Transmisión: @vehicle.Transmission</p>
            <p class="card-text">Recogida: <b>@BookingState.PickUpDate.Value.ToShortDateString()</b></p>
            <p class="card-text">Entrega: <b>@BookingState.DropOffDate.Value.ToShortDateString()</b></p>
            <p class="card-text">Precio por día: <b>@vehicle.DailyRate:C</b></p>
            <p class="card-text">Total: <b>@TotalPrice:C</b> (@Days días)</p>
            <button class="btn btn-success" @onclick="ConfirmBooking" disabled="@isLoading || !isAuthenticated">Confirmar Reserva</button>
            @if (!isAuthenticated)
            {
                <div class="text-danger mt-2">Debe iniciar sesión para confirmar la reserva.</div>
            }
            @if (successMessage != null)
            {
                <div class="alert alert-success mt-2">@successMessage</div>
            }
        </div>
    </div>
}

@code {
    Vehicle? vehicle;
    decimal TotalPrice;
    int Days;
    bool isLoading = false;
    bool isAuthenticated = false;
    string? successMessage = null;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (BookingState.VehicleId == 0) return;
        vehicle = await DbContext.Vehicles.FindAsync(BookingState.VehicleId);

        if (vehicle != null && BookingState.PickUpDate.HasValue && BookingState.DropOffDate.HasValue)
        {
            Days = (BookingState.DropOffDate.Value - BookingState.PickUpDate.Value).Days;
            if (Days < 1) Days = 1;
            TotalPrice = Days * vehicle.DailyRate;
        }
    }

    private async Task ConfirmBooking()
    {
        if (!isAuthenticated) return;
        isLoading = true;

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userId = UserManager.GetUserId(authState.User);

        if (userId == null || vehicle == null || BookingState.PickUpDate == null || BookingState.DropOffDate == null) return;

        var booking = new Booking
        {
            UserId = userId,
            VehicleId = vehicle.VehicleId,
            PickUpDate = BookingState.PickUpDate.Value,
            DropOffDate = BookingState.DropOffDate.Value,
            TotalPrice = TotalPrice
        };

        DbContext.Bookings.Add(booking);
        await DbContext.SaveChangesAsync();

        successMessage = "¡Reserva confirmada con éxito!";
        BookingState.Clear();
        isLoading = false;
        StateHasChanged();
    }
}